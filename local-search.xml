<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPU结构和功能</title>
    <link href="/2020/12/15/CPU%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD/"/>
    <url>/2020/12/15/CPU%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1>CPU结构和功能</h1><h3 id="一、CPU的任务">一、CPU的任务</h3><ul><li>取指令：从存储器（register、main-memory、cache）读取指令</li><li>解释指令：对指令解码，确定要进行的操作</li><li>取数据：指令的执行可能需要从存储器或I/O中读取数据</li><li>处理数据：对数据完成要求的算术/逻辑运算</li><li>写数据：执行的结果可能需要写回存储器或I/O</li></ul><h3 id="二、CPU的要求">二、CPU的要求</h3><ul><li>CPU能暂时的存储部分数据</li><li>CPU必须知道当前执行指令的位置，以便获取下一条指令的位置</li><li>CPU必须在执行指令期间保存指令和数据</li></ul><p><img src="/img/article_img/cpu_structure_function1.jpg" alt="cpu简介图"></p><p><img src="/img/article_img/cpu_structure_function2.jpg" alt="cpu详介图"></p><h3 id="三、寄存器的组成">三、寄存器的组成</h3><h4 id="1-CPU中寄存器主要可以分为两类：">1. CPU中寄存器主要可以分为两类：</h4><ul><li>用户可见寄存器：允许机器语言或者汇编语言的编程人员通过优化寄存器的使用而减少对内存的访问</li><li>控制和状态寄存器：由控制器来控制CPU的操作，并由拥有特权的操作系统程序来控制程序的执行</li></ul><h4 id="2-用户可见寄存器：">2. 用户可见寄存器：</h4><ul><li>通用寄存器：可被程序员指派各种用途</li><li>数据寄存器：用于保存数据，不能用于操作数地址的计算</li><li>地址寄存器：用于可以是自身有某种通用性或者专用性的寻址方式</li><li>标志寄存器：保存条件码、允许程序员读出，但不能更改</li></ul><h4 id="3-寄存器的设计出发点：">3. 寄存器的设计出发点：</h4><ul><li>使用完全通用寄存器还是规定各寄存器的用途</li><li>寄存器的数量</li><li>寄存器的长度</li></ul><h4 id="4-控制和状态寄存器：">4. 控制和状态寄存器：</h4><ul><li>程序计数器（PC）：存放待取指令的地址</li><li>指令寄存器（IR）：存放最近取来的地址</li><li>存储器地址寄存器（MAR）：存放存储器位置的地址</li><li>存储器缓冲寄存器（MBR）：存有将被写入或最近从存储器读出的字</li></ul><h4 id="5-程序状态字（PSW）：">5. 程序状态字（PSW）：</h4><ul><li>符号（sign）：容纳算术运算结果的符号位</li><li>零（zero）：当结果是0时置位</li><li>进位（carry）：操作导致向最高位有向上进位或借位时被置位</li><li>等于（equal）：逻辑结果相等置位</li><li>溢出（overflow）：用于指示算术运算溢出</li><li>中断允许/禁止（interrupt enable/disable）：用于允许/禁止中断</li><li>监管（supervisor）：指出CPU是执行在监管模式还是用户模式</li></ul><h4 id="6-设计控制和状态寄存器组织时考虑的几个因素：">6. 设计控制和状态寄存器组织时考虑的几个因素：</h4><ul><li>考虑对操作系统的支持（某些控制信息专门为控制操作系统使用）</li><li>考虑控制信息在寄存器和存储器之间的分配</li></ul><h4 id="7-指令周期：">7. 指令周期：</h4><ul><li>取指：将下一条指令从存储器中读入CPU</li><li>执行；解释操作码并完成指定操作</li><li>中断：如果中断允许并且有中断发生，则保存当前状态执行中断</li></ul><h4 id="8-间接周期：">8. 间接周期：</h4><ul><li>指令的执行可能涉及到内存中的一个或多个操作数，并且每个操作数都需要内存访问</li><li>如果使用间接地址，需要额外的内存访问</li><li>将间接地址的获取视为一个或多个指令周期</li></ul><p><img src="/img/article_img/cpu_structure_function3.png" alt="指令周期"></p><p><img src="/img/article_img/cpu_structure_function4.png" alt="指令周期状态图"></p><h4 id="9-数据流：">9. 数据流：</h4><ol><li><img src="/img/article_img/cpu_structure_function5.png" alt="数据流与取指周期"><ul><li>控制器向PC发送请求 -&gt; PC将存有的下一条指令的地址传给MAR -&gt; MAR放到地址总线上</li><li>控制器将控制信号放到控制总线上 -&gt; 存储器接收信号 -&gt; 存储器获取指令地址并将对应的指令放到数据总线上</li><li>MBR从数据总线上获取指令然后传给IR</li></ul></li><li><img src="/img/article_img/cpu_structure_function6.png" alt="数据流间接周期"><ul><li>控制器将控制信号放到控制总线上 -&gt; 存储器接收信号并将指令的地址放到数据总线上</li><li>MBR读取数据并传给MAR -&gt; MAR将该地址传放到地址总线上 -&gt; 存储器读取并将对应的指令放到数据总线上</li><li>MBR从数据总线上读取指令</li></ul></li><li><img src="/img/article_img/cpu_structure_function7.png" alt="数据流与中断周期"><ul><li>控制器向MAR传送信号 -&gt; MAR将当前数据要保存到的地址放到地址总线上</li><li>控制器向PC传送信号 -&gt; PC将当前要保存的数据传入MBR -&gt; MBR将数据放到数据总线上</li><li>控制器向控制总线上发送信号 -&gt; 存储器读取信号 -&gt; 存储器从地址总线上接收地址，并从数据总线上接收数据</li><li>存储器将数据写入对应的地址</li></ul></li></ol><h3 id="四、指令流水线技术：">四、指令流水线技术：</h3><p><strong>1. 流水线技术</strong>：把制作过程安排在一条装配线上，多个产品能在各个阶段同时被加工</p><p><strong>2. 对指令执行使用流水线技术</strong>：显然能够加快指令的执行，但是使得执行速度翻倍是不可能的，原因如下：</p><ul><li>执行时间一般长于指令的执行（执行指令和取指令都可能使用I/O，所以会产生冲突，一次只能有一个进行）</li><li>条件分支指令使得待取的下一条指令的地址未知（当多条指令执行了一些步骤后，遇到跳转指令，这些指令执行的步骤将会作废）</li></ul><p><strong>3.对指令执行的细分</strong>（为了进一步加速）：</p><ul><li>取指：获取下一条要执行指令到MBR</li><li>译码：解析指令，确定操作码、操作数</li><li>计算操作数：计算源操作数的有效地址</li><li>取操作数：从存储器中读取操作数（寄存器中的数据不需要读取）</li><li>执行：完成指定操作</li><li>写回操作数：将结果写回存储器</li></ul><p><strong>4. 几个限制性能提升的因素</strong>：</p><ul><li>细分的各个阶段时间不完全相等</li><li>遇到条件转移指令时，之前进行的指令会作废</li><li>寄存器和存储器可能产生冲突</li></ul><p><strong>5. 人们认为流水线中阶段越多，执行速度越快？No</strong></p><ul><li>流水线的每一阶段，都会有某些开销设计数据在MBR间的传送，以及各种准备会使得一次指令的总的执行时间边长</li><li>优化流水线的使用和处理存储器及寄存器相关性所需要的控制逻辑总量，会随着流水线阶段数的增长而急剧增长</li><li><strong>锁存延迟</strong>，即流水线阶段之间的缓冲需要一定时间来完成其操作，这也会增加指令周期的时间</li></ul><p><strong>6.流水线性能</strong>：</p><ul><li>$t_{i}$:流水线第$i$段的延迟</li><li>$t_{m}$:最大段延迟</li><li>$k$:指令流水线段数</li><li>$d$:所存延迟</li><li>$t = max[ t_{i} ] + d = t_{m} + d$ -&gt; $t$: 指令流水线周期</li><li>假设$n$条指令没有条件转移的在进行，$T_{k, n} = [ k + (n - 1)] t$表示k段流水线执行n条指令所需的总时间</li><li>完成第一条指令需要k个周期，其余n-1条指令需要n-1个周期</li><li>加速比$S_{k} = T_{1, n} / T_{k, n} = nk / (k + n - 1)$</li></ul>]]></content>
    
    
    <categories>
      
      <category>20COA-NOTES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机体系结构</tag>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/13/hello-world/"/>
    <url>/2020/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
